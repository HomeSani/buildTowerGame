local function save_bestscore(bestscore)
	local filename = sys.get_save_file("sys_save_load", "bestscore")
	sys.save(filename, { bestscore = bestscore })
end

local function load_bestscore()
	local filename = sys.get_save_file("sys_save_load", "bestscore")
	local data = sys.load(filename)
	
	return data.bestscore or 0
end

_G.tower_blocks = {}
_G.pixel_scale = 2.4

local score = 0
local best_score = load_bestscore()
local difficult = 1

local CRAINE_HEIGHT = 123
local CRAINE_LEFT_LIMIT = 100
local CRAINE_RIGHT_LIMIT = 540
local BLOCK_TOWER_HEIGHT = 64

function move_up(self)
	local new_craine_pos_y = go.get_position("/craine").y + (BLOCK_TOWER_HEIGHT * _G.pixel_scale)
	self.spawn_pos.y = new_craine_pos_y - (CRAINE_HEIGHT * _G.pixel_scale) - 110

	go.animate("/craine", "position.y", go.PLAYBACK_ONCE_FORWARD, new_craine_pos_y, go.EASING_LINEAR, 0.5)
	go.animate("/camera", "position.y", go.PLAYBACK_ONCE_FORWARD, new_craine_pos_y - (CRAINE_HEIGHT * _G.pixel_scale)*3.4, go.EASING_LINEAR, 0.6, 0.4)
end

function create_tower_block(self)
	local tower_block = factory.create("/tower_factory#factory", self.spawn_pos, nil, nil, vmath.vector3(_G.pixel_scale, _G.pixel_scale, _G.pixel_scale))
	go.animate(tower_block, "position.x", go.PLAYBACK_LOOP_PINGPONG, CRAINE_RIGHT_LIMIT, go.EASING_LINEAR, 3.5 - (0.5 * difficult))

	go.set_position(vmath.vector3(CRAINE_LEFT_LIMIT, go.get_position("/craine").y, 0), "/craine")
	go.animate("/craine", "position.x", go.PLAYBACK_LOOP_PINGPONG, CRAINE_RIGHT_LIMIT, go.EASING_LINEAR, 3.5 - (0.5 * difficult))

	table.insert(_G.tower_blocks, tower_block)

	return tower_block
end

function init(self)
	msg.post(".", "acquire_input_focus")

	math.randomseed(100000 * (socket.gettime() % 1))

	self.score = 0
	
	self.spawn_pos = vmath.vector3(CRAINE_LEFT_LIMIT, go.get_position("/craine").y-(CRAINE_HEIGHT * _G.pixel_scale)-110, 0)

	-- crete first block
	local tower_block = factory.create("/tower_factory#factory", vmath.vector3(320, 131, 0), nil, nil, vmath.vector3(_G.pixel_scale, _G.pixel_scale, _G.pixel_scale))
	msg.post(tower_block, "start_falling")
	table.insert(_G.tower_blocks, tower_block)

	self.cloud_timer = timer.delay(2, true, function (self)
		if self.spawn_pos.y >= 1200 then
			for i = -1, 1 do
				local rand_scale_cof = math.random(_G.pixel_scale, 3.1)
				local rand_offset = (math.random(20, 60) * rand_scale_cof + 400) * i
				
				local cloud = factory.create("/clouds#factory", vmath.vector3(900, self.spawn_pos.y + rand_offset, -1), nil, nil, vmath.vector3(rand_scale_cof, rand_scale_cof, rand_scale_cof))

				go.animate(cloud, "position.x", go.PLAYBACK_ONCE_FORWARD, -100, go.EASING_LINEAR, 8, 0, function (self)
					go.delete(cloud)
				end)
			end
		else
			local rand_scale_cof = math.random(_G.pixel_scale, 3.1)
			local rand_offset = (math.random(20, 60) * rand_scale_cof + 400)

			local cloud = factory.create("/clouds#factory", vmath.vector3(900, self.spawn_pos.y + rand_offset, -1), nil, nil, vmath.vector3(rand_scale_cof, rand_scale_cof, rand_scale_cof))

			go.animate(cloud, "position.x", go.PLAYBACK_ONCE_FORWARD, -100, go.EASING_LINEAR, 8, 0, function (self)
				go.delete(cloud)
			end)
		end
	end)

	msg.post("@render:", "clear_color", { color = vmath.vector4(104/255, 203/255, 255/255, 0) }) -- set bg color
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		go.cancel_animations(self.tower_block, "position.x")
		go.cancel_animations("/craine", "position.x")
		msg.post(self.tower_block, "start_falling")

		move_up(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("tower_is_stand") then
		self.tower_block = create_tower_block(self)

		if not(#_G.tower_blocks == 2) then
			score = score + 1
		end
		
		if score > 0 and score % 2 == 0 and difficult < 4 then
			difficult = difficult + 1
		end

		if score >= 4 then
			for i = 1, #_G.tower_blocks-1 do
				go.animate(_G.tower_blocks[i], "position.x", go.PLAYBACK_LOOP_PINGPONG, go.get_position(_G.tower_blocks[i]).x - 40, go.EASING_LINEAR, 1.5)
			end
		end
				
		msg.post("/gui", "update_score", {score = score})
	end	

	if message_id == hash("lose") then
		-- run lose gui

		if score > best_score then
			save_bestscore(score)
		end
	end	
end