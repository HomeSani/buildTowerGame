function check_and_start_tower_fall(self, block_pos, last_block_pos)
	if block_pos.x < last_block_pos.x - self.stand_offset then
		go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 220, go.EASING_LINEAR, 1.8)
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, block_pos.x - self.stand_offset/2.5, go.EASING_LINEAR, 0.2)
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, -1000, go.EASING_LINEAR, 3, 0.3)

		return false
	end

	if block_pos.x > last_block_pos.x + self.stand_offset then
		go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, -220, go.EASING_LINEAR, 1.8)
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, block_pos.x + self.stand_offset/2.5, go.EASING_LINEAR, 0.2)
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, -1000, go.EASING_LINEAR, 3, 0.3)

		return false
	end

	return true
end

local BLOCK_TOWER_WIDTH = 110
local BLOCK_TOWER_HEIGHT = 64
local BLOCK_SPRITES = {"tower_block_1", "tower_block_2", "tower_block_3"}

function init(self)
	sprite.play_flipbook("#sprite", BLOCK_SPRITES[math.random(1, 3)])

	self.is_stand = false
	self.stand_offset = (BLOCK_TOWER_WIDTH * _G.pixel_scale)/2
	
	self.position = go.get_position()
	self.velocity = vmath.vector3(0, 0, 0)
	self.gravity = 0
end

function update(self, dt)
	local gravity = vmath.vector3(0, self.gravity, 0)

	if not self.is_stand then
		self.velocity = self.velocity + gravity
		go.set_position(go.get_position() + self.velocity * dt)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_falling") then
		self.gravity = -5
	end

	if message_id == hash("collision_response") and self.is_stand == false then -- check stand
		local block_pos = go.get_position()
		local last_block_pos = go.get_position(message.other_id)

		self.is_stand = true
		self.gravity = 0

		if not(#_G.tower_blocks == 1) then
			go.set_position(vmath.vector3(block_pos.x, last_block_pos.y + (_G.pixel_scale * BLOCK_TOWER_HEIGHT), 0))
		end

		self.is_stand = check_and_start_tower_fall(self, block_pos, last_block_pos)

		if not(message.other_id == hash("/roud")) then
			if block_pos.y <= go.get_position(_G.tower_blocks[#_G.tower_blocks-1]).y then
				self.is_stand = check_and_start_tower_fall(self, block_pos, last_block_pos)
			end
		end

		if self.is_stand then
			msg.post("/game_manager#game_manager", "tower_is_stand")
		else
			print("LOSE")
			self.is_stand = true
		end
	end
end